# -*- coding: utf-8 -*-
"""Google Search Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17ji9lhcmdgVGaDU54HWZ6uvjdcPD5BFN

#Google Search Analysis with Python

install Requried Libraries
"""

!pip install pytrends

"""Import Necessary Libraries"""

import pandas as pd
from pytrends.request import TrendReq
import matplotlib.pyplot as plt
import time

Trending_topics = TrendReq(hl='en-US', tz=360)

"""Create a dataframe of top 10 countries that search for the term "Cloud Computing". For this we will be using the method build_payload which allows storing a list of keywords that you want to search. In this you can also specify the timeframe and the category to query the data from."""

kw_list=["Data Science"]
Trending_topics.build_payload(kw_list,cat=0, timeframe='today 12-m')
time.sleep(5)

"""The interest_over_time() method returns the historical indexed data for when the specified keyword was most searched according to the timeframe mentioned in the build payload method."""

data = Trending_topics.interest_over_time()
data = data.sort_values(by="Data Science", ascending = False)
data = data.head(10)
print(data)

"""The get_historical_interest() allows us to specify periods such as year_start, month_start, day_start, hour_start, year_end, month_end, day_end and hour_end."""

kw_list = ["Data Science"]
Trending_topics.build_payload(kw_list, cat=0, timeframe='2024-01-01 2024-02-01', geo='', gprop='')
data = Trending_topics.interest_over_time()
data = data.sort_values(by="Data Science", ascending = False)
data = data.head(10)
print(data)

"""Next is the interest_by_region method which lets you know the performance of the keyword per region. It will show results on a scale of 0-100 where 100 indicates the country with the most search and 0 indicates with least search or not enough data."""

data = Trending_topics.interest_by_region()
data = data.sort_values(by="Data Science",
                        ascending = False)
data = data.head(10)
print(data)

"""Visualizing Interest By Region"""

data.reset_index().plot(x='geoName', y='Data Science',
                        figsize=(10,5), kind="bar")
plt.style.use('fivethirtyeight')
plt.show()

"""Searching for Related Queries
Whenever a user searches for something about a particular topic on Google there is a high probability that the user will search for more queries related to the same topic. These are known as related queries. Let us find a list of related queries for "Cloud Computing".
"""

try:
    Trending_topics.build_payload(kw_list=["Data Science"])
    related_queries = Trending_topics.related_queries()
    related_queries.values()
except (KeyError, IndexError):
    print("No related queries found for 'Data Science'")

"""Keyword Suggestions
The suggestions() method helps you to explore what the world is searching for. It returns a list of additional suggested keywords that can be used to filter a trending search on Google.
"""

keywords = Trending_topics.suggestions(
  keyword='Data Science')
df = pd.DataFrame(keywords)
df.drop(columns= 'mid')

top_queries_df = related_queries['Data Science']['top']
rising_queries_df = related_queries['Data Science']['rising']

plt.figure(figsize=(12, 8))
plt.barh(top_queries_df['query'], top_queries_df['value'])
plt.title('Top Related Queries for Data Science')
plt.xlabel('Value')
plt.ylabel('Query')
plt.gca().invert_yaxis() # To display the highest value at the top
plt.show()

plt.figure(figsize=(12, 8))
plt.barh(rising_queries_df['query'], rising_queries_df['value'])
plt.title('Rising Related Queries for Data Science')
plt.xlabel('Value')
plt.ylabel('Query')
plt.gca().invert_yaxis() # To display the highest value at the top
plt.show()

kw_list = ["Data Science", "Machine Learning", "Artificial Intelligence", "Data Analytics"]
Trending_topics.build_payload(kw_list, cat=0, timeframe='today 12-m')
time.sleep(5)
interest_df = Trending_topics.interest_over_time()
display(interest_df)

plt.figure(figsize=(10, 6))
interest_df.plot(figsize=(10, 6))
plt.title('Google Search Interest Over Time')
plt.xlabel('Date')
plt.ylabel('Search Interest Index')
plt.legend(title='Keywords')
plt.show()

import plotly.express as px

# 1. Plotly visualization for Interest Over Time
if not interest_df.empty:
    fig_time = px.line(interest_df.drop(columns=['isPartial']),
                       title='Google Search Interest Over Time')
    fig_time.update_layout(xaxis_title='Date',
                           yaxis_title='Search Interest Index')
    fig_time.show()
else:
    print("Interest over time data is not available for visualization.")

# 2. Plotly visualization for Interest by Region
if not data.empty:
    fig_region = px.bar(data.reset_index(), x='geoName', y='Data Science',
                        title='Google Search Interest by Top 10 Region')
    fig_region.update_layout(xaxis_title='Region',
                             yaxis_title='Search Interest Index')
    fig_region.show()
else:
    print("Regional interest data is not available for visualization.")

# 3. Plotly visualization for Top Related Queries
# Ensure top_queries_df is available and not empty from previous steps
if 'top_queries_df' in locals() and not top_queries_df.empty:
    fig_top_queries = px.bar(top_queries_df.head(15).sort_values(by='value', ascending=True),
                             x='value', y='query',
                             orientation='h',
                             title='Top 15 Related Queries for Data Science')
    fig_top_queries.update_layout(xaxis_title='Value',
                                  yaxis_title='Query')
    fig_top_queries.show()
else:
    print("Top related queries data is not available for visualization.")

"""#summary

This project analyzes Google Search trends for the term "Cloud Computing" using the `pytrends` library. It examines how search interest for this topic has changed over time and across different geographical regions. The analysis also identifies related search queries and provides search suggestions, offering insights into the broader context of "Cloud Computing" searches.

## Summary:

### Data Analysis Key Findings

*   The analysis aimed to explore Google Search trends for "Cloud Computing" using the `pytrends` library.
*   The process involved attempting to retrieve interest over time and by region, identify related queries, and get search suggestions.
*   The primary challenge encountered was the inability of the execution environment to directly create and populate markdown cells, which was a core requirement for generating a README, project summary, and code explanations within the notebook.
*   Attempts to add markdown content using `code_block` resulted in `SyntaxError`.

### Insights or Next Steps

*   Future analysis should be conducted in an environment that supports the creation and editing of markdown cells within a notebook structure to fully fulfill the documentation requirements of the task.
*   Focus on executing the core data retrieval and analysis steps using `pytrends`, `pandas`, and `matplotlib` first, and then generate documentation separately if in-notebook markdown editing is not feasible.
"""